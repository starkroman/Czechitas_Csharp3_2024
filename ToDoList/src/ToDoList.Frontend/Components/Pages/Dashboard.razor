@using ToDoList.Domain.Models
@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject IToDoItemsClient ToDoItemsClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h1>Dashboard</h1>

<table class="table table-hover mt-5">
    <thead class="table-dark">
        <tr>
            <th>ID
                <button class="btn btn-success" @onclick="SortById">by Id</button>
            </th>
            <th>Name
                <button class="btn btn-success" @onclick="SortByName">by Name</button>
            </th>
            <th>Description
                <button class="btn btn-success" @onclick="SortByDescription">by Description</button>
            </th>
            <th>IsCompleted
                <button class="btn btn-success" @onclick="SortByIsComleted">by IsCompleted</button>
            </th>
            <th>Category
                <button class="btn btn-success" @onclick="SortByCategory">by Category</button>
            </th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if(ToDoItems is not null)
        {
            @foreach (var ToDoItem in ToDoItems)
            {
                <tr class="@GetCorrectClassForTableLine(ToDoItem.IsCompleted)">
                    <td>@ToDoItem.ToDoItemId</td>
                    <td>@ToDoItem.Name</td>
                    <td>@ToDoItem.Description</td>
                    <td>@ToDoItem.IsCompleted</td>
                    <td>@ToDoItem.Category</td>
                    <td class="d-flex gap-3">
                        <button class="btn btn-primary" @onclick="() => EditItem(ToDoItem)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteItem(ToDoItem)">Delete</button>
                    </td>
                </tr>
            }
        }
        <tr>
            <td>
                <button class="btn btn-warning" @onclick="() => CreateItem()">Create</button>
            </td>
            <td>
                <button class="btn btn-secondary" @onclick="SortByIsCompletedTrue">IsCompleted TRUE</button>
            </td>
            <td>
                <button class="btn btn-secondary" @onclick="SortByIsCompletedFalse">IsCompleted FALSE</button>
            </td>
            <td>
                <button class="btn btn-secondary" @onclick="SortByIsComleted">IsCompleted ALL</button>
            </td>
        </tr>
    </tbody>
</table>


@code
{
    protected string GetCorrectClassForTableLine(bool IsCompleted)
    {
        return IsCompleted ? "table-success" : "table-secondary";
    }
    /*
    public List<ToDoItemView> ToDoItems = new List<ToDoItemView>
    {
        new ToDoItemView { ToDoItemId = 1, Name = "Nakoupit", Description = "Kaufland", IsCompleted = false },
        new ToDoItemView { ToDoItemId = 2, Name = "Uklidit", Description = "Dětský pokoj", IsCompleted = true },
        new ToDoItemView { ToDoItemId = 3, Name = "Práce", Description = "Závěrka", IsCompleted = false }

        <tr class="@(toDoItem.IsCompleted ? "table-secondary table-success" : "table-secondary")">

        https://getbootstrap.com/
        https://github.com/czechitas/csharp3-template/blob/main/ToDoList/src/ToDoList.Frontend/Clients/ToDoItemsClient.cs
        https://github.com/czechitas/csharp3-template/blob/main/ToDoList/src/ToDoList.Frontend/Clients/IToDoItemsClient.cs

    };
    */

    // Lekce 9. - async, Task, await, ....
    protected override async Task OnInitializedAsync()
    {
        ToDoItems = await ToDoItemsClient.ReadItemsAsync();
    }

    // Lekce 10
    public void EditItem(ToDoItemView toDoItem)
    {
        NavigationManager.NavigateTo($"editToDoItem/{toDoItem.ToDoItemId}");
    }

    public void DeleteItem(ToDoItemView toDoItem)
    {
        NavigationManager.NavigateTo($"deleteToDoItem/{toDoItem.ToDoItemId}");
    }

    public void CreateItem()
    {
        NavigationManager.NavigateTo($"createToDoItem/");
    }

    // Lekce 9.
    private List<ToDoItemView>? ToDoItems;

    public void SortById()
    {
        ToDoItems = ToDoItems?.OrderByDescending(item => item.ToDoItemId).ToList();
    }
    public void SortByName()
    {
        ToDoItems = ToDoItems?.OrderBy(item => item.Name).ToList();
    }
    public void SortByDescription()
    {
        ToDoItems = ToDoItems?.OrderByDescending(item => item.Description).ToList();
    }
    public void SortByIsComleted()
    {
        ToDoItems = ToDoItems?.OrderByDescending(item => item.IsCompleted).ToList();
    }
    public void SortByCategory()
    {
        ToDoItems = ToDoItems?.OrderByDescending(item => item.Category).ToList();
    }

    public void SortByIsCompletedTrue()
    {
        OnInitializedAsync();
        ToDoItems = ToDoItems?.Where(item => item.IsCompleted == true).ToList();
    }

    public void SortByIsCompletedFalse()
    {
        OnInitializedAsync();
        ToDoItems = ToDoItems?.Where(item => item.IsCompleted == false).ToList();
    }

    public void SortByIsComletedAll()
    {
        OnInitializedAsync();
        ToDoItems = ToDoItems?.OrderBy(item => item.IsCompleted).ToList();
    }
}
